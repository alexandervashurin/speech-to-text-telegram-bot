import os
import logging
from datetime import datetime
from tempfile import gettempdir
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import faster_whisper
from pydub import AudioSegment
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

class Transcriber:
    def __init__(self, model_size="large-v3", device="cpu", compute_type="int8"):
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper {model_size}")
        try:
            self.model = faster_whisper.WhisperModel(
                model_size, 
                device=device, 
                compute_type=compute_type
            )
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            raise

    def transcribe(self, file_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {file_path}")
            segments, info = self.model.transcribe(
                file_path,
                beam_size=5,
                vad_filter=True,
                language="ru"
            )
            
            text = ' '.join(segment.text for segment in segments).strip()
            logger.debug(f"–°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {text[:500]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            return text
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            raise RuntimeError("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ") from e

def split_audio_into_segments(audio_path, segment_duration=30, overlap=2):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
    
    Args:
        audio_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        segment_duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
        overlap: –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    """
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ: {audio_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio = AudioSegment.from_file(audio_path)
        duration_ms = len(audio)
        duration_seconds = duration_ms / 1000
        
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_seconds:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if duration_seconds <= segment_duration:
            logger.info("–ê—É–¥–∏–æ –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫—É–Ω–¥, —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
            return [audio_path]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        base_dir = os.path.dirname(audio_path)
        segments_dir = os.path.join(base_dir, "segments")
        os.makedirs(segments_dir, exist_ok=True)
        
        segment_paths = []
        segment_duration_ms = segment_duration * 1000
        overlap_ms = overlap * 1000
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        num_segments = math.ceil((duration_ms - overlap_ms) / (segment_duration_ms - overlap_ms))
        logger.info(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {num_segments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        for i in range(num_segments):
            start_time = i * (segment_duration_ms - overlap_ms)
            end_time = min(start_time + segment_duration_ms, duration_ms)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment = audio[start_time:end_time]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment_filename = f"segment_{i+1:03d}.wav"
            segment_path = os.path.join(segments_dir, segment_filename)
            segment.export(segment_path, format="wav")
            
            segment_paths.append(segment_path)
            logger.debug(f"–°–æ–∑–¥–∞–Ω —Å–µ–≥–º–µ–Ω—Ç {i+1}/{num_segments}: {segment_filename} ({len(segment)/1000:.2f}—Å)")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(segment_paths)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        return segment_paths
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}", exc_info=True)
        raise RuntimeError("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã") from e

def cleanup_segments(segment_paths):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"""
    try:
        for segment_path in segment_paths:
            if os.path.exists(segment_path):
                os.remove(segment_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω —Å–µ–≥–º–µ–Ω—Ç: {segment_path}")
        
        # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        if segment_paths:
            segments_dir = os.path.dirname(segment_paths[0])
            if os.path.exists(segments_dir):
                os.rmdir(segments_dir)
                logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {segments_dir}")
                
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä–∞
try:
    transcriber = Transcriber()
except Exception as e:
    logger.critical(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('üéô –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.')

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    logger.info(f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} ({user.username})")
    
    try:
        audio_file = update.message.audio or update.message.voice
        if not audio_file:
            await update.message.reply_text('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.')
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = os.path.join(gettempdir(), f"tg_audio_{user.id}")
        os.makedirs(temp_dir, exist_ok=True)
        logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await update.message.reply_text('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...')
        file = await context.bot.get_file(audio_file.file_id)
        audio_path = os.path.join(temp_dir, f"audio_{audio_file.file_id}.ogg")
        await file.download_to_drive(audio_path)
        logger.info(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_path} ({os.path.getsize(audio_path)} –±–∞–π—Ç)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        file_size = os.path.getsize(audio_path)
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.2f} –ú–ë")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        try:
            segment_paths = split_audio_into_segments(audio_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(segment_paths)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ')
            raise
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        all_texts = []
        try:
            for i, segment_path in enumerate(segment_paths):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}/{len(segment_paths)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if len(segment_paths) > 1:
                    await update.message.reply_text(f'‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–º–µ–Ω—Ç {i+1}/{len(segment_paths)}...')
                
                try:
                    segment_text = transcriber.transcribe(segment_path)
                    if segment_text.strip():
                        all_texts.append(segment_text.strip())
                        logger.info(f"–°–µ–≥–º–µ–Ω—Ç {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(segment_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        logger.warning(f"–°–µ–≥–º–µ–Ω—Ç {i+1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}: {str(e)}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    continue
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if all_texts:
                text = ' '.join(all_texts)
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                text = ""
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
                
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
            raise
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(audio_path)
            logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            cleanup_segments(segment_paths)

        if not text.strip():
            await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å')
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(text) <= 4096:
            await update.message.reply_text(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{text}")
            logger.info("–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        else:
            filename = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è_{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
            text_path = os.path.join(temp_dir, filename)
            
            try:
                # –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≤ {filename}")
                with open(text_path, 'w', encoding='utf-8') as f:
                    f.write(text)
                    logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
                with open(text_path, 'r', encoding='utf-8') as f:
                    content = f.read(1000)
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:\n{content}...")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                await update.message.reply_document(
                    document=InputFile(text_path, filename=filename),
                    caption="üìÅ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
                )
                logger.info("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
                await update.message.reply_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞')
            
            finally:
                if os.path.exists(text_path):
                    os.remove(text_path)
                    logger.info("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text('‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')

def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, handle_audio))
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        exit(1)

if __name__ == '__main__':
    main()
