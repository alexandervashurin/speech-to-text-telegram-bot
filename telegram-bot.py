import os
import logging
from datetime import datetime
from tempfile import gettempdir
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import faster_whisper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

class Transcriber:
    def __init__(self, model_size="large-v3", device="cpu", compute_type="int8"):
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper {model_size}")
        try:
            self.model = faster_whisper.WhisperModel(
                model_size, 
                device=device, 
                compute_type=compute_type
            )
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            raise

    def transcribe(self, file_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {file_path}")
            segments, info = self.model.transcribe(
                file_path,
                beam_size=5,
                vad_filter=True,
                language="ru"
            )
            
            text = ' '.join(segment.text for segment in segments).strip()
            logger.debug(f"–°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {text[:500]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            return text
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            raise RuntimeError("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ") from e

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä–∞
try:
    transcriber = Transcriber()
except Exception as e:
    logger.critical(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('üéô –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.')

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    logger.info(f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} ({user.username})")
    
    try:
        audio_file = update.message.audio or update.message.voice
        if not audio_file:
            await update.message.reply_text('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.')
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = os.path.join(gettempdir(), f"tg_audio_{user.id}")
        os.makedirs(temp_dir, exist_ok=True)
        logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await update.message.reply_text('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...')
        file = await context.bot.get_file(audio_file.file_id)
        audio_path = os.path.join(temp_dir, f"audio_{audio_file.file_id}.ogg")
        await file.download_to_drive(audio_path)
        logger.info(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_path} ({os.path.getsize(audio_path)} –±–∞–π—Ç)")

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        try:
            text = transcriber.transcribe(audio_path)
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
            raise
        finally:
            os.remove(audio_path)
            logger.info("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        if not text.strip():
            await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å')
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(text) <= 4096:
            await update.message.reply_text(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{text}")
            logger.info("–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        else:
            filename = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è_{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
            text_path = os.path.join(temp_dir, filename)
            
            try:
                # –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≤ {filename}")
                with open(text_path, 'w', encoding='utf-8') as f:
                    f.write(text)
                    logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
                with open(text_path, 'r', encoding='utf-8') as f:
                    content = f.read(1000)
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:\n{content}...")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                await update.message.reply_document(
                    document=InputFile(text_path, filename=filename),
                    caption="üìÅ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
                )
                logger.info("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
                await update.message.reply_text('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞')
            
            finally:
                if os.path.exists(text_path):
                    os.remove(text_path)
                    logger.info("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text('‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')

def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, handle_audio))
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        exit(1)

if __name__ == '__main__':
    main()
